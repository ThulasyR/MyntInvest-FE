{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { normalizeArguments } from './parsePhoneNumber.js';\nimport PhoneNumberMatcher from './PhoneNumberMatcher.js';\n/**\r\n * @return ES6 `for ... of` iterator.\r\n */\n\nexport default function searchNumbers() {\n  var _normalizeArguments = normalizeArguments(arguments),\n      text = _normalizeArguments.text,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  var matcher = new PhoneNumberMatcher(text, options, metadata);\n  return _defineProperty({}, Symbol.iterator, function () {\n    return {\n      next: function next() {\n        if (matcher.hasNext()) {\n          return {\n            done: false,\n            value: matcher.next()\n          };\n        }\n\n        return {\n          done: true\n        };\n      }\n    };\n  });\n}","map":{"version":3,"sources":["../source/searchNumbers.js"],"names":["text","options","metadata","normalizeArguments","matcher","Symbol","next","done","value"],"mappings":";;;;;;;;;;;;;;;AAAA,SAAA,kBAAA,QAAA,uBAAA;AACA,OAAA,kBAAA,MAAA,yBAAA;AAEA;;;;AAGA,eAAe,SAAA,aAAA,GACf;AACC,MAAA,mBAAA,GAAoCG,kBAAkB,CAAtD,SAAsD,CAAtD;AAAA,MAAQH,IAAR,GAAA,mBAAA,CAAA,IAAA;AAAA,MAAcC,OAAd,GAAA,mBAAA,CAAA,OAAA;AAAA,MAAuBC,QAAvB,GAAA,mBAAA,CAAA,QAAA;;AAEA,MAAME,OAAO,GAAG,IAAA,kBAAA,CAAA,IAAA,EAAA,OAAA,EAAhB,QAAgB,CAAhB;AAEA,SAAA,eAAA,CAAA,EAAA,EACEC,MAAM,CADR,QAAA,EAAA,YACqB;AACnB,WAAO;AACHC,MAAAA,IAAI,EAAE,SAAA,IAAA,GAAM;AACX,YAAIF,OAAO,CAAX,OAAIA,EAAJ,EAAuB;AACzB,iBAAO;AACNG,YAAAA,IAAI,EADE,KAAA;AAENC,YAAAA,KAAK,EAAEJ,OAAO,CAAPA,IAAAA;AAFD,WAAP;AAIA;;AACD,eAAO;AACNG,UAAAA,IAAI,EAAE;AADA,SAAP;AAGG;AAXE,KAAP;AAFF,GAAA,CAAA;AAiBA","sourcesContent":["import { normalizeArguments } from './parsePhoneNumber.js'\r\nimport PhoneNumberMatcher from './PhoneNumberMatcher.js'\r\n\r\n/**\r\n * @return ES6 `for ... of` iterator.\r\n */\r\nexport default function searchNumbers()\r\n{\r\n\tconst { text, options, metadata } = normalizeArguments(arguments)\r\n\r\n\tconst matcher = new PhoneNumberMatcher(text, options, metadata)\r\n\r\n\treturn  {\r\n\t\t[Symbol.iterator]() {\r\n\t\t\treturn {\r\n\t    \t\tnext: () => {\r\n\t    \t\t\tif (matcher.hasNext()) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tdone: false,\r\n\t\t\t\t\t\t\tvalue: matcher.next()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tdone: true\r\n\t\t\t\t\t}\r\n\t    \t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}