{"ast":null,"code":"function _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nvar PatternMatcher = /*#__PURE__*/function () {\n  function PatternMatcher(pattern) {\n    _classCallCheck(this, PatternMatcher);\n\n    this.matchTree = new PatternParser().parse(pattern);\n  }\n\n  _createClass(PatternMatcher, [{\n    key: \"match\",\n    value: function match(string) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          allowOverflow = _ref.allowOverflow;\n\n      if (!string) {\n        throw new Error('String is required');\n      }\n\n      var result = _match(string.split(''), this.matchTree, true);\n\n      if (result && result.match) {\n        delete result.matchedChars;\n      }\n\n      if (result && result.overflow) {\n        if (!allowOverflow) {\n          return;\n        }\n      }\n\n      return result;\n    }\n  }]);\n\n  return PatternMatcher;\n}();\n\nexport { PatternMatcher as default };\n\nfunction _match(characters, tree, last) {\n  if (typeof tree === 'string') {\n    if (last) {\n      // `tree` is always a single character.\n      if (characters.length > tree.length) {\n        return {\n          overflow: true\n        };\n      }\n    }\n\n    var characterString = characters.join('');\n\n    if (tree.indexOf(characterString) === 0) {\n      // `tree` is always a single character.\n      // If `tree.indexOf(characterString) === 0`\n      // then `characters.length === tree.length`.\n\n      /* istanbul ignore else */\n      if (characters.length === tree.length) {\n        return {\n          match: true,\n          matchedChars: characters\n        };\n      } // `tree` is always a single character.\n      // If `tree.indexOf(characterString) === 0`\n      // then `characters.length === tree.length`.\n\n      /* istanbul ignore next */\n\n\n      return {\n        partialMatch: true // matchedChars: characters\n\n      };\n    }\n\n    if (characterString.indexOf(tree) === 0) {\n      return {\n        match: true,\n        matchedChars: characters.slice(0, tree.length)\n      };\n    }\n\n    return;\n  }\n\n  if (Array.isArray(tree)) {\n    var restCharacters = characters.slice();\n    var i = 0;\n\n    while (i < tree.length) {\n      var subtree = tree[i];\n\n      var result = _match(restCharacters, subtree, last && i === tree.length - 1);\n\n      if (!result) {\n        return;\n      } else if (result.overflow) {\n        return result;\n      } else if (result.match) {\n        // Continue with the next subtree with the rest of the characters.\n        restCharacters = restCharacters.slice(result.matchedChars.length);\n\n        if (restCharacters.length === 0) {\n          if (i === tree.length - 1) {\n            return {\n              match: true,\n              matchedChars: characters\n            };\n          } else {\n            return {\n              partialMatch: true // matchedChars: characters\n\n            };\n          }\n        }\n      } else {\n        /* istanbul ignore else */\n        if (result.partialMatch) {\n          return {\n            partialMatch: true // matchedChars: characters\n\n          };\n        } else {\n          throw new Error(\"Unsupported match result:\\n\".concat(JSON.stringify(result, null, 2)));\n        }\n      }\n\n      i++;\n    } // If `last` then overflow has already been checked\n    // by the last element of the `tree` array.\n\n    /* istanbul ignore if */\n\n\n    if (last) {\n      return {\n        overflow: true\n      };\n    }\n\n    return {\n      match: true,\n      matchedChars: characters.slice(0, characters.length - restCharacters.length)\n    };\n  }\n\n  switch (tree.op) {\n    case '|':\n      var partialMatch;\n\n      for (var _iterator = _createForOfIteratorHelperLoose(tree.args), _step; !(_step = _iterator()).done;) {\n        var branch = _step.value;\n\n        var _result = _match(characters, branch, last);\n\n        if (_result) {\n          if (_result.overflow) {\n            return _result;\n          } else if (_result.match) {\n            return {\n              match: true,\n              matchedChars: _result.matchedChars\n            };\n          } else {\n            /* istanbul ignore else */\n            if (_result.partialMatch) {\n              partialMatch = true;\n            } else {\n              throw new Error(\"Unsupported match result:\\n\".concat(JSON.stringify(_result, null, 2)));\n            }\n          }\n        }\n      }\n\n      if (partialMatch) {\n        return {\n          partialMatch: true // matchedChars: ...\n\n        };\n      } // Not even a partial match.\n\n\n      return;\n\n    case '[]':\n      for (var _iterator2 = _createForOfIteratorHelperLoose(tree.args), _step2; !(_step2 = _iterator2()).done;) {\n        var _char = _step2.value;\n\n        if (characters[0] === _char) {\n          if (characters.length === 1) {\n            return {\n              match: true,\n              matchedChars: characters\n            };\n          }\n\n          if (last) {\n            return {\n              overflow: true\n            };\n          }\n\n          return {\n            match: true,\n            matchedChars: [_char]\n          };\n        }\n      } // No character matches.\n\n\n      return;\n\n    /* istanbul ignore next */\n\n    default:\n      throw new Error(\"Unsupported instruction tree: \".concat(tree));\n  }\n}\n\nvar OPERATOR = new RegExp( // any of:\n'(' + // or operator\n'\\\\|' + // or\n'|' + // or group start\n'\\\\(\\\\?\\\\:' + // or\n'|' + // or group end\n'\\\\)' + // or\n'|' + // one-of set start\n'\\\\[' + // or\n'|' + // one-of set end\n'\\\\]' + ')');\nvar ILLEGAL_CHARACTER_REGEXP = /[\\(\\)\\[\\]\\?\\:\\|]/;\n\nvar PatternParser = /*#__PURE__*/function () {\n  function PatternParser() {\n    _classCallCheck(this, PatternParser);\n  }\n\n  _createClass(PatternParser, [{\n    key: \"parse\",\n    value: function parse(pattern) {\n      this.context = [{\n        or: true,\n        instructions: []\n      }];\n      this.parsePattern(pattern);\n\n      if (this.context.length !== 1) {\n        throw new Error('Non-finalized contexts left when pattern parse ended');\n      }\n\n      var _this$context$ = this.context[0],\n          branches = _this$context$.branches,\n          instructions = _this$context$.instructions;\n\n      if (branches) {\n        return [{\n          op: '|',\n          args: branches.concat([instructions])\n        }];\n      }\n      /* istanbul ignore if */\n\n\n      if (instructions.length === 0) {\n        throw new Error('Pattern is required');\n      }\n\n      return instructions;\n    }\n  }, {\n    key: \"startContext\",\n    value: function startContext(context) {\n      this.context.push(context);\n    }\n  }, {\n    key: \"endContext\",\n    value: function endContext() {\n      this.context.pop();\n    }\n  }, {\n    key: \"getContext\",\n    value: function getContext() {\n      return this.context[this.context.length - 1];\n    }\n  }, {\n    key: \"parsePattern\",\n    value: function parsePattern(pattern) {\n      if (!pattern) {\n        throw new Error('Pattern is required');\n      }\n\n      var match = pattern.match(OPERATOR);\n\n      if (!match) {\n        if (ILLEGAL_CHARACTER_REGEXP.test(pattern)) {\n          throw new Error(\"Illegal characters found in a pattern: \".concat(pattern));\n        }\n\n        this.getContext().instructions = this.getContext().instructions.concat(pattern.split(''));\n        return;\n      }\n\n      var operator = match[1];\n      var before = pattern.slice(0, match.index);\n      var rightPart = pattern.slice(match.index + operator.length);\n\n      switch (operator) {\n        case '(?:':\n          if (before) {\n            this.parsePattern(before);\n          }\n\n          this.startContext({\n            or: true,\n            instructions: [],\n            branches: []\n          });\n          break;\n\n        case ')':\n          if (!this.getContext().or) {\n            throw new Error('\")\" operator must be preceded by \"(?:\" operator');\n          }\n\n          if (before) {\n            this.parsePattern(before);\n          }\n\n          if (this.getContext().instructions.length === 0) {\n            throw new Error('No instructions found after \"|\" operator in an \"or\" group');\n          }\n\n          var _this$getContext = this.getContext(),\n              branches = _this$getContext.branches;\n\n          branches.push(this.getContext().instructions);\n          this.endContext();\n          this.getContext().instructions.push({\n            op: '|',\n            args: branches\n          });\n          break;\n\n        case '|':\n          if (!this.getContext().or) {\n            throw new Error('\"|\" operator can only be used inside \"or\" groups');\n          }\n\n          if (before) {\n            this.parsePattern(before);\n          } // The top-level is an implicit \"or\" group, if required.\n\n\n          if (!this.getContext().branches) {\n            // `branches` are not defined only for the root implicit \"or\" operator.\n\n            /* istanbul ignore else */\n            if (this.context.length === 1) {\n              this.getContext().branches = [];\n            } else {\n              throw new Error('\"branches\" not found in an \"or\" group context');\n            }\n          }\n\n          this.getContext().branches.push(this.getContext().instructions);\n          this.getContext().instructions = [];\n          break;\n\n        case '[':\n          if (before) {\n            this.parsePattern(before);\n          }\n\n          this.startContext({\n            oneOfSet: true\n          });\n          break;\n\n        case ']':\n          if (!this.getContext().oneOfSet) {\n            throw new Error('\"]\" operator must be preceded by \"[\" operator');\n          }\n\n          this.endContext();\n          this.getContext().instructions.push({\n            op: '[]',\n            args: parseOneOfSet(before)\n          });\n          break;\n\n        /* istanbul ignore next */\n\n        default:\n          throw new Error(\"Unknown operator: \".concat(operator));\n      }\n\n      if (rightPart) {\n        this.parsePattern(rightPart);\n      }\n    }\n  }]);\n\n  return PatternParser;\n}();\n\nfunction parseOneOfSet(pattern) {\n  var values = [];\n  var i = 0;\n\n  while (i < pattern.length) {\n    if (pattern[i] === '-') {\n      if (i === 0 || i === pattern.length - 1) {\n        throw new Error(\"Couldn't parse a one-of set pattern: \".concat(pattern));\n      }\n\n      var prevValue = pattern[i - 1].charCodeAt(0) + 1;\n      var nextValue = pattern[i + 1].charCodeAt(0) - 1;\n      var value = prevValue;\n\n      while (value <= nextValue) {\n        values.push(String.fromCharCode(value));\n        value++;\n      }\n    } else {\n      values.push(pattern[i]);\n    }\n\n    i++;\n  }\n\n  return values;\n}","map":{"version":3,"sources":["../source/AsYouTypeFormatter.PatternMatcher.js"],"names":["PatternMatcher","allowOverflow","result","match","string","characters","tree","overflow","characterString","matchedChars","partialMatch","Array","restCharacters","i","subtree","last","JSON","branch","char","OPERATOR","ILLEGAL_CHARACTER_REGEXP","PatternParser","or","instructions","branches","op","args","pattern","operator","before","rightPart","oneOfSet","parseOneOfSet","values","prevValue","nextValue","value","String"],"mappings":"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","sourcesContent":["export default class PatternMatcher {\r\n\tconstructor(pattern) {\r\n\t\tthis.matchTree = new PatternParser().parse(pattern)\r\n\t}\r\n\r\n\tmatch(string, { allowOverflow } = {}) {\r\n\t\tif (!string) {\r\n\t\t\tthrow new Error('String is required')\r\n\t\t}\r\n\t\tconst result = match(string.split(''), this.matchTree, true)\r\n\t\tif (result && result.match) {\r\n\t\t\tdelete result.matchedChars\r\n\t\t}\r\n\t\tif (result && result.overflow) {\r\n\t\t\tif (!allowOverflow) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result\r\n\t}\r\n}\r\n\r\nfunction match(characters, tree, last) {\r\n\tif (typeof tree === 'string') {\r\n\t\tif (last) {\r\n\t\t\t// `tree` is always a single character.\r\n\t\t\tif (characters.length > tree.length) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\toverflow: true\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst characterString = characters.join('')\r\n\t\tif (tree.indexOf(characterString) === 0) {\r\n\t\t\t// `tree` is always a single character.\r\n\t\t\t// If `tree.indexOf(characterString) === 0`\r\n\t\t\t// then `characters.length === tree.length`.\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif (characters.length === tree.length) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tmatch: true,\r\n\t\t\t\t\tmatchedChars: characters\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// `tree` is always a single character.\r\n\t\t\t// If `tree.indexOf(characterString) === 0`\r\n\t\t\t// then `characters.length === tree.length`.\r\n\t\t\t/* istanbul ignore next */\r\n\t\t\treturn {\r\n\t\t\t\tpartialMatch: true,\r\n\t\t\t\t// matchedChars: characters\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (characterString.indexOf(tree) === 0) {\r\n\t\t\treturn {\r\n\t\t\t\tmatch: true,\r\n\t\t\t\tmatchedChars: characters.slice(0, tree.length)\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn\r\n\t}\r\n\r\n\tif (Array.isArray(tree)) {\r\n\t\tlet restCharacters = characters.slice()\r\n\t\tlet i = 0\r\n\t\twhile (i < tree.length) {\r\n\t\t\tconst subtree = tree[i]\r\n\t\t\tconst result = match(restCharacters, subtree, last && (i === tree.length - 1))\r\n\t\t\tif (!result) {\r\n\t\t\t\treturn\r\n\t\t\t} else if (result.overflow) {\r\n\t\t\t\treturn result\r\n\t\t\t} else if (result.match) {\r\n\t\t\t\t// Continue with the next subtree with the rest of the characters.\r\n\t\t\t\trestCharacters = restCharacters.slice(result.matchedChars.length)\r\n\t\t\t\tif (restCharacters.length === 0) {\r\n\t\t\t\t\tif (i === tree.length - 1) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tmatch: true,\r\n\t\t\t\t\t\t\tmatchedChars: characters\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tpartialMatch: true,\r\n\t\t\t\t\t\t\t// matchedChars: characters\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\tif (result.partialMatch) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tpartialMatch: true,\r\n\t\t\t\t\t\t// matchedChars: characters\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow new Error(`Unsupported match result:\\n${JSON.stringify(result, null, 2)}`)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\ti++\r\n\t\t}\r\n\t\t// If `last` then overflow has already been checked\r\n\t\t// by the last element of the `tree` array.\r\n\t\t/* istanbul ignore if */\r\n\t\tif (last) {\r\n\t\t\treturn {\r\n\t\t\t\toverflow: true\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tmatch: true,\r\n\t\t\tmatchedChars: characters.slice(0, characters.length - restCharacters.length)\r\n\t\t}\r\n\t}\r\n\r\n\tswitch (tree.op) {\r\n\t\tcase '|':\r\n\t\t\tlet partialMatch\r\n\t\t\tfor (const branch of tree.args) {\r\n\t\t\t\tconst result = match(characters, branch, last)\r\n\t\t\t\tif (result) {\r\n\t\t\t\t\tif (result.overflow) {\r\n\t\t\t\t\t\treturn result\r\n\t\t\t\t\t} else if (result.match) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tmatch: true,\r\n\t\t\t\t\t\t\tmatchedChars: result.matchedChars\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\t\t\tif (result.partialMatch) {\r\n\t\t\t\t\t\t\tpartialMatch = true\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthrow new Error(`Unsupported match result:\\n${JSON.stringify(result, null, 2)}`)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (partialMatch) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tpartialMatch: true,\r\n\t\t\t\t\t// matchedChars: ...\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Not even a partial match.\r\n\t\t\treturn\r\n\r\n\t\tcase '[]':\r\n\t\t\tfor (const char of tree.args) {\r\n\t\t\t\tif (characters[0] === char) {\r\n\t\t\t\t\tif (characters.length === 1) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tmatch: true,\r\n\t\t\t\t\t\t\tmatchedChars: characters\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (last) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\toverflow: true\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tmatch: true,\r\n\t\t\t\t\t\tmatchedChars: [char]\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// No character matches.\r\n\t\t\treturn\r\n\r\n\t\t/* istanbul ignore next */\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unsupported instruction tree: ${tree}`)\r\n\t}\r\n}\r\n\r\nconst OPERATOR = new RegExp(\r\n\t// any of:\r\n\t'(' +\r\n\t\t// or operator\r\n\t\t'\\\\|' +\r\n\t\t// or\r\n\t\t'|' +\r\n\t\t// or group start\r\n\t\t'\\\\(\\\\?\\\\:' +\r\n\t\t// or\r\n\t\t'|' +\r\n\t\t// or group end\r\n\t\t'\\\\)' +\r\n\t\t// or\r\n\t\t'|' +\r\n\t\t// one-of set start\r\n\t\t'\\\\[' +\r\n\t\t// or\r\n\t\t'|' +\r\n\t\t// one-of set end\r\n\t\t'\\\\]' +\r\n\t')'\r\n)\r\n\r\nconst ILLEGAL_CHARACTER_REGEXP = /[\\(\\)\\[\\]\\?\\:\\|]/\r\n\r\nclass PatternParser {\r\n\tparse(pattern) {\r\n\t\tthis.context = [{\r\n\t\t\tor: true,\r\n\t\t\tinstructions: []\r\n\t\t}]\r\n\r\n\t\tthis.parsePattern(pattern)\r\n\r\n\t\tif (this.context.length !== 1) {\r\n\t\t\tthrow new Error('Non-finalized contexts left when pattern parse ended')\r\n\t\t}\r\n\r\n\t\tconst { branches, instructions } = this.context[0]\r\n\r\n\t\tif (branches) {\r\n\t\t\treturn [{\r\n\t\t\t\top: '|',\r\n\t\t\t\targs: branches.concat([instructions])\r\n\t\t\t}]\r\n\t\t}\r\n\r\n\t\t/* istanbul ignore if */\r\n\t\tif (instructions.length === 0) {\r\n\t\t\tthrow new Error('Pattern is required')\r\n\t\t}\r\n\r\n\t\treturn instructions\r\n\t}\r\n\r\n\tstartContext(context) {\r\n\t\tthis.context.push(context)\r\n\t}\r\n\r\n\tendContext() {\r\n\t\tthis.context.pop()\r\n\t}\r\n\r\n\tgetContext() {\r\n\t\treturn this.context[this.context.length - 1]\r\n\t}\r\n\r\n\tparsePattern(pattern) {\r\n\t\tif (!pattern) {\r\n\t\t\tthrow new Error('Pattern is required')\r\n\t\t}\r\n\r\n\t\tconst match = pattern.match(OPERATOR)\r\n\t\tif (!match) {\r\n\t\t\tif (ILLEGAL_CHARACTER_REGEXP.test(pattern)) {\r\n\t\t\t\tthrow new Error(`Illegal characters found in a pattern: ${pattern}`)\r\n\t\t\t}\r\n\t\t\tthis.getContext().instructions = this.getContext().instructions.concat(\r\n\t\t\t\tpattern.split('')\r\n\t\t\t)\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tconst operator = match[1]\r\n\t\tconst before = pattern.slice(0, match.index)\r\n\t\tconst rightPart = pattern.slice(match.index + operator.length)\r\n\r\n\t\tswitch (operator) {\r\n\t\t\tcase '(?:':\r\n\t\t\t\tif (before) {\r\n\t\t\t\t\tthis.parsePattern(before)\r\n\t\t\t\t}\r\n\t\t\t\tthis.startContext({\r\n\t\t\t\t\tor: true,\r\n\t\t\t\t\tinstructions: [],\r\n\t\t\t\t\tbranches: []\r\n\t\t\t\t})\r\n\t\t\t\tbreak\r\n\r\n\t\t\tcase ')':\r\n\t\t\t\tif (!this.getContext().or) {\r\n\t\t\t\t\tthrow new Error('\")\" operator must be preceded by \"(?:\" operator')\r\n\t\t\t\t}\r\n\t\t\t\tif (before) {\r\n\t\t\t\t\tthis.parsePattern(before)\r\n\t\t\t\t}\r\n\t\t\t\tif (this.getContext().instructions.length === 0) {\r\n\t\t\t\t\tthrow new Error('No instructions found after \"|\" operator in an \"or\" group')\r\n\t\t\t\t}\r\n\t\t\t\tconst { branches } = this.getContext()\r\n\t\t\t\tbranches.push(\r\n\t\t\t\t\tthis.getContext().instructions\r\n\t\t\t\t)\r\n\t\t\t\tthis.endContext()\r\n\t\t\t\tthis.getContext().instructions.push({\r\n\t\t\t\t\top: '|',\r\n\t\t\t\t\targs: branches\r\n\t\t\t\t})\r\n\t\t\t\tbreak\r\n\r\n\t\t\tcase '|':\r\n\t\t\t\tif (!this.getContext().or) {\r\n\t\t\t\t\tthrow new Error('\"|\" operator can only be used inside \"or\" groups')\r\n\t\t\t\t}\r\n\t\t\t\tif (before) {\r\n\t\t\t\t\tthis.parsePattern(before)\r\n\t\t\t\t}\r\n\t\t\t\t// The top-level is an implicit \"or\" group, if required.\r\n\t\t\t\tif (!this.getContext().branches) {\r\n\t\t\t\t\t// `branches` are not defined only for the root implicit \"or\" operator.\r\n\t\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\t\tif (this.context.length === 1) {\r\n\t\t\t\t\t\tthis.getContext().branches = []\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthrow new Error('\"branches\" not found in an \"or\" group context')\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tthis.getContext().branches.push(\r\n\t\t\t\t\tthis.getContext().instructions\r\n\t\t\t\t)\r\n\t\t\t\tthis.getContext().instructions = []\r\n\t\t\t\tbreak\r\n\r\n\t\t\tcase '[':\r\n\t\t\t\tif (before) {\r\n\t\t\t\t\tthis.parsePattern(before)\r\n\t\t\t\t}\r\n\t\t\t\tthis.startContext({\r\n\t\t\t\t\toneOfSet: true\r\n\t\t\t\t})\r\n\t\t\t\tbreak\r\n\r\n\t\t\tcase ']':\r\n\t\t\t\tif (!this.getContext().oneOfSet) {\r\n\t\t\t\t\tthrow new Error('\"]\" operator must be preceded by \"[\" operator')\r\n\t\t\t\t}\r\n\t\t\t\tthis.endContext()\r\n\t\t\t\tthis.getContext().instructions.push({\r\n\t\t\t\t\top: '[]',\r\n\t\t\t\t\targs: parseOneOfSet(before)\r\n\t\t\t\t})\r\n\t\t\t\tbreak\r\n\r\n\t\t\t/* istanbul ignore next */\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Unknown operator: ${operator}`)\r\n\t\t}\r\n\r\n\t\tif (rightPart) {\r\n\t\t\tthis.parsePattern(rightPart)\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction parseOneOfSet(pattern) {\r\n\tconst values = []\r\n\tlet i = 0\r\n\twhile (i < pattern.length) {\r\n\t\tif (pattern[i] === '-') {\r\n\t\t\tif (i === 0 || i === pattern.length - 1) {\r\n\t\t\t\tthrow new Error(`Couldn't parse a one-of set pattern: ${pattern}`)\r\n\t\t\t}\r\n\t\t\tconst prevValue = pattern[i - 1].charCodeAt(0) + 1\r\n\t\t\tconst nextValue = pattern[i + 1].charCodeAt(0) - 1\r\n\t\t\tlet value = prevValue\r\n\t\t\twhile (value <= nextValue) {\r\n\t\t\t\tvalues.push(String.fromCharCode(value))\r\n\t\t\t\tvalue++\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tvalues.push(pattern[i])\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n\treturn values\r\n}"]},"metadata":{},"sourceType":"module"}